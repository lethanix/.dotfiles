env:
    # TERM variable
    #
    # This value is used to set the `$TERM` environment variable for
    # each instance of Alacritty. If it is not present, alacritty will
    # check the local terminfo database and use `alacritty` if it is
    # available, otherwise `xterm-256color` is used.
    TERM: xterm-256color

window:
    # Full screen on 13" macbook pro
    dimensions:
        columns: 100
        lines: 35

    # Window position (changes require restart)
    #
    # Specified in number of pixels.
    # If the position is not set, the window manager will handle the placement.
    #position:
    #   x: 720
    #   y: 450

    # Window padding (changes require restart)
    #
    # Blank space added around the window in pixels. This padding is scaled by
    # DPI and the specified value is always added at both opposing sides.
    padding:
        x: 14
        y: 14

    # Spread additional padding evenly around the terminal content.
    dynamic_padding: true

    # Window decorations
    #
    # Available values:
    # - full: borders and title bar
    # - none: neither borders nor title bar
    # - transparent: title bar, transparent background and  title bar buttons
    # - buttonless: title bar, transparent background, but no title bar buttons
    decorations: buttonless

    #Background opacity
    #
    # Window opacity as a floating point number from `0.0` to `1.0`.
    # The value `0.0` is completely transparent and `1.0` is opaque.
    opacity: 1

    # Startup Mode (changes require restart)
    #
    # Values for `startup_mode`:
    #   - Windowed
    #   - Maximized
    #   - Fullscreen
    #
    # Values for `startup_mode` (macOS only):
    #   - SimpleFullscreen
    startup_mode: Windowed

    # Window title
    title:
        Alacritty

        # Allow terminal applications to change Alacritty's window title.
    dynamic_title: true

scrolling:
    # maximum number of lines in the scrollback buffer.
    # Specifying '0' will disable scrolling.
    history: 10000

    # Number of lines the viewport will move for every line scrolled when
    # scrollback is enabled (history > 0).
    multiplier: 4

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false

import:

  # Font configuration -> Select the font yaml file
  # - ~/.config/alacritty/fonts/jetbrains.yml
  #- ~/.config/alacritty/fonts/fira.yml
  - ~/.config/alacritty/fonts/space.yml
  #- ~/.config/alacritty/fonts/caskaydia.yml

  # Change the color importing the corresponding yaml file
  # - ~/.config/alacritty/colors/ayumirage.yml
  # - ~/.config/alacritty/colors/dracula.yml
  # - ~/.config/alacritty/colors/one_dark.yml
  # - ~/.config/alacritty/colors/gotham.yml
  # - ~/.config/alacritty/colors/gruvbox.yml
  #- ~/.config/alacritty/colors/gruvbox-light.yml
  #- ~/.config/alacritty/colors/gruvbox-light-medium.yml
  #- ~/.config/alacritty/colors/base16-gruvbox-light-soft-256.yml
  # - ~/.config/alacritty/colors/ayu.yml
  # - ~/.config/alacritty/colors/spaceduck.yml
  # - ~/.config/alacritty/colors/nightfly.yml
  # - ~/.config/alacritty/colors/base16-horizon-dark-256.yml
  # - ~/.config/alacritty/colors/base16-material-palenight.yml
  - ~/.config/alacritty/colors/base16-seti-256.yml
  # - ~/.config/alacritty/colors/github.yml

mouse:
    # Click settings
    #
    # The `double_click` and `triple_click` settings control the time
    # alacritty should wait for accepting multiple clicks as one double
    # or triple click.
    double_click: { threshold: 300 }
    triple_click: { threshold: 300 }

    hide_when_typing: true
    hints:
        launcher: open

bell:
    animation: EaseOutExpo
    color: "0x332244"
    duration: 10

selection:
    semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

    # When set to `true`, selected text will be copied to the primary clipboard.
    save_to_clipboard: false

cursor:
    # Cursor style
    style:
        # Cursor shape
        #
        # Values for `shape`:
        #   - ▇ Block
        #   - _ Underline
        #   - | Beam
        shape: Underline

        # Cursor blinking state
        #
        # Values for `blinking`:
        #   - Never: Prevent the cursor from ever blinking
        #   - Off: Disable blinking by default
        #   - On: Enable blinking by default
        #   - Always: Force the cursor to always blink
        blinking: Off

    # Vi mode cursor style
    #
    # If the vi mode cursor style is `None` or not specified, it will fall back to
    # the style of the active value of the normal cursor.
    #
    # See `cursor.style` for available options.
    vi_mode_style: None

    # Cursor blinking interval in milliseconds.
    blink_interval: 750

    # If this is `true`, the cursor will be rendered as a hollow box when the
    # window is not focused.
    unfocused_hollow: true

    # Thickness of the cursor relative to the cell width as floating point number
    # from `0.0` to `1.0`.
    thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

# Offer IPC using `alacritty msg` (unix only)
#ipc_socket: true

# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
hints:
    # Keys used for the hint labels.
    alphabet: "jfkdls;ahgurieowpq"

    # List with all available hints
    #
    # Each hint must have a `regex` and either an `action` or a `command` field.
    # The fields `mouse`, `binding` and `post_processing` are optional.
    #
    # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
    # `mouse.mods` accept the same values as they do in the `key_bindings` section.
    #
    # The `mouse.enabled` field controls if the hint should be underlined while
    # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
    #
    # If the `post_processing` field is set to `true`, heuristics will be used to
    # shorten the match if there are characters likely not to be part of the hint
    # (e.g. a trailing `.`). This is most useful for URIs.
    #
    # Values for `action`:
    #   - Copy
    #       Copy the hint's text to the clipboard.
    #   - Paste
    #       Paste the hint's text to the terminal or search.
    #   - Select
    #       Select the hint's text.
    #   - MoveViModeCursor
    #       Move the vi mode cursor to the beginning of the hint.
    #enabled:
    # - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
    #           [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
    #   command: xdg-open
    #   post_processing: true
    #   mouse:
    #     enabled: true
    #     mods: None
    #   binding:
    #     key: U
    #     mods: Control|Shift
# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad

key_bindings:
  # Default
  - { key: Paste, action: Paste }
  - { key: Copy, action: Copy }
  - { key: L, mods: Control, action: ClearLogNotice }
  - { key: L, mods: Control, chars: "\x0c" }
  - { key: Home, mods: Alt, chars: "\x1b[1;3H" }
  - { key: Home, chars: "\x1bOH", mode: AppCursor }
  - { key: Home, chars: "\x1b[H", mode: ~AppCursor }
  - { key: End, mods: Alt, chars: "\x1b[1;3F" }
  - { key: End, chars: "\x1bOF", mode: AppCursor }
  - { key: End, chars: "\x1b[F", mode: ~AppCursor }
  - { key: PageUp, mods: Shift, action: ScrollPageUp, mode: ~Alt }
  - { key: PageUp, mods: Shift, chars: "\x1b[5;2~", mode: Alt }
  - { key: PageUp, mods: Control, chars: "\x1b[5;5~" }
  - { key: PageUp, mods: Alt, chars: "\x1b[5;3~" }
  - { key: PageUp, chars: "\x1b[5", mode: AppCursor}
  - { key: 116, action: ScrollPageUp }
  - { key: 121, action: ScrollPageDown }
  - { key: PageDown, mods: Shift, action: ScrollPageDown, mode: ~Alt }
  - { key: PageDown, mods: Shift, chars: "\x1b[6;2~", mode: Alt }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~" }
  - { key: PageDown, mods: Alt, chars: "\x1b[6;3~" }
  - { key: PageDown, chars: "\x1b[6" }
  - { key: Tab, mods: Shift, chars: "\x1b[Z" }
  - { key: Back, chars: "\x7f" }
  - { key: Back, mods: Alt, chars: "\x1b\x7f" }
  - { key: Insert, chars: "\x1b[2~" }
  - { key: Delete, chars: "\x1b[3~" }
  #- { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                       }
  - { key: Left, mods: Control, chars: "\x1b[1;5D" }
  
  - { key: Left, chars: "\x1b[D", mode: ~AppCursor }
  - { key: Left, chars: "\x1bOD", mode: AppCursor }
  - { key: Right, mods: Shift, chars: "\x1b[1;2C" }
  - { key: Right, mods: Control, chars: "\x1b[1;5C" }
  
  - { key: Right, chars: "\x1b[C", mode: ~AppCursor }
  - { key: Right, chars: "\x1bOC", mode: AppCursor }
  - { key: Up, mods: Shift, chars: "\x1b[1;2A" }
  - { key: Up, mods: Control, chars: "\x1b[1;5A" }
  #- { key: Up, mods: Alt, chars: "\x1b[1;3A" }
  - { key: Up, chars: "\x1b[A", mode: ~AppCursor }
  - { key: Up, chars: "\x1bOA", mode: AppCursor }
  - { key: Down, mods: Shift, chars: "\x1b[1;2B" }
  - { key: Down, mods: Control, chars: "\x1b[1;5B" }
  - { key: Down, mods: Alt, chars: "\x1b[1;3B" }
  - { key: Down, chars: "\x1b[B", mode: ~AppCursor }
  - { key: Down, chars: "\x1bOB", mode: AppCursor }
  - { key: F1, chars: "\x1bOP" }
  - { key: F2, chars: "\x1bOQ" }
  - { key: F3, chars: "\x1bOR" }
  - { key: F4, chars: "\x1bOS" }
  - { key: F5, chars: "\x1b[15~" }
  - { key: F6, chars: "\x1b[17~" }
  - { key: F7, chars: "\x1b[18~" }
  - { key: F8, chars: "\x1b[19~" }
  - { key: F9, chars: "\x1b[20~" }
  - { key: F10, chars: "\x1b[21~" }
  - { key: F11, chars: "\x1b[23~" }
  - { key: F12, chars: "\x1b[24~" }
  - { key: F1, mods: Shift, chars: "\x1b[1;2P" }
  - { key: F2, mods: Shift, chars: "\x1b[1;2Q" }
  - { key: F3, mods: Shift, chars: "\x1b[1;2R" }
  - { key: F4, mods: Shift, chars: "\x1b[1;2S" }
  - { key: F5, mods: Shift, chars: "\x1b[15;2~" }
  - { key: F6, mods: Shift, chars: "\x1b[17;2~" }
  - { key: F7, mods: Shift, chars: "\x1b[18;2~" }
  - { key: F8, mods: Shift, chars: "\x1b[19;2~" }
  - { key: F9, mods: Shift, chars: "\x1b[20;2~" }
  - { key: F10, mods: Shift, chars: "\x1b[21;2~" }
  - { key: F11, mods: Shift, chars: "\x1b[23;2~" }
  - { key: F12, mods: Shift, chars: "\x1b[24;2~" }
  - { key: F1, mods: Control, chars: "\x1b[1;5P" }
  - { key: F2, mods: Control, chars: "\x1b[1;5Q" }
  - { key: F3, mods: Control, chars: "\x1b[1;5R" }
  - { key: F4, mods: Control, chars: "\x1b[1;5S" }
  - { key: F5, mods: Control, chars: "\x1b[15;5~" }
  - { key: F6, mods: Control, chars: "\x1b[17;5~" }
  - { key: F7, mods: Control, chars: "\x1b[18;5~" }
  - { key: F8, mods: Control, chars: "\x1b[19;5~" }
  - { key: F9, mods: Control, chars: "\x1b[20;5~" }
  - { key: F10, mods: Control, chars: "\x1b[21;5~" }
  - { key: F11, mods: Control, chars: "\x1b[23;5~" }
  - { key: F12, mods: Control, chars: "\x1b[24;5~" }
  - { key: F1, mods: Alt, chars: "\x1b[1;6P" }
  - { key: F2, mods: Alt, chars: "\x1b[1;6Q" }
  - { key: F3, mods: Alt, chars: "\x1b[1;6R" }
  - { key: F4, mods: Alt, chars: "\x1b[1;6S" }
  - { key: F5, mods: Alt, chars: "\x1b[15;6~" }
  - { key: F6, mods: Alt, chars: "\x1b[17;6~" }
  - { key: F7, mods: Alt, chars: "\x1b[18;6~" }
  - { key: F8, mods: Alt, chars: "\x1b[19;6~" }
  - { key: F9, mods: Alt, chars: "\x1b[20;6~" }
  - { key: F10, mods: Alt, chars: "\x1b[21;6~" }
  - { key: F11, mods: Alt, chars: "\x1b[23;6~" }
  - { key: F12, mods: Alt, chars: "\x1b[24;6~" }
  - { key: F1, mods: Super, chars: "\x1b[1;3P" }
  - { key: F2, mods: Super, chars: "\x1b[1;3Q" }
  - { key: F3, mods: Super, chars: "\x1b[1;3R" }
  - { key: F4, mods: Super, chars: "\x1b[1;3S" }
  - { key: F5, mods: Super, chars: "\x1b[15;3~" }
  - { key: F6, mods: Super, chars: "\x1b[17;3~" }
  - { key: F7, mods: Super, chars: "\x1b[18;3~" }
  - { key: F8, mods: Super, chars: "\x1b[19;3~" }
  - { key: F9, mods: Super, chars: "\x1b[20;3~" }
  - { key: F10, mods: Super, chars: "\x1b[21;3~" }
  - { key: F11, mods: Super, chars: "\x1b[23;3~" }
  - { key: F12, mods: Super, chars: "\x1b[24;3~" }
  - { key: NumpadEnter, chars: "\n" }

  - { key: E, mods: Alt, chars: "\x1be"}
  # Key bindings for Zellij
  - { key: N, mods: Alt, chars: "\x1bn"}
  - { key: H, mods: Alt, chars: "\x1bh"}
  - { key: J, mods: Alt, chars: "\x1bj"}
  - { key: K, mods: Alt, chars: "\x1bk"}
  - { key: L, mods: Alt, chars: "\x1bl"}
  - { key: T, mods: Alt, chars: "\x1bt"}
  - { key: 27, mods: Alt, chars: "\x1b-"}
  - { key: 24, mods: Alt, chars: "\x1b+"}
  - { key: 33, mods: Alt, chars: "\x1b[" } # abre corchetes `[`
  - { key: 30, mods: Alt, chars: "\x1b]" } # cierra corchetes `]`
  
  # General quality of life improvements
  - {
    key: Comma,
    mods: Command,
    command:
      {
        program: "zsh",
        args: ["-c", "open -a VimR $HOME/.config/alacritty/alacritty.yml"],
      },
    }
  - { key: N, mods: Command, action: CreateNewWindow }
  - { key: T, mods: Command, action: SpawnNewInstance }
  - { key: Space, mods: Alt, chars: " " }
  - { key: Back, mods: Super, chars: "\x15" } # delete word/line
  
  # Ajustes para teclado macOS español/Spanish de España con layout ISO (no ANSI); tecla Intro grande.
  #    - { key: 10, mods: Alt, chars: "\x5c" } # barra invertida `\`
  #    - { key: 18, mods: Alt, chars: "\x7c" } # barra vertical `|`
  #    - { key: Key2, mods: Alt, chars: "@" } # arroba `@`
  #    - { key: Key3, mods: Alt, chars: "#" } # almohadilla/cardinalidad `#`
  #    - { key: Key6, mods: Alt, chars: "¬" } # negación en lógica `¬`
  #    - { key: 39, mods: Alt, chars: "{" } # abre llaves `{`
  #    - { key: 42, mods: Alt, chars: "}" } # cierra llaves `}`
  #    - { key: 33, mods: Alt, chars: "[" } # abre corchetes `[`
  #    - { key: 30, mods: Alt, chars: "]" } # cierra corchetes `]`

  # Others
  - { key: Return, mods: Command, action: ToggleFullscreen }
  - { key: Left, mods: Alt, chars: "\x1bb" }
  - { key: Right, mods: Alt, chars: "\x1bf" }
  - { key: Left, mods: Command, chars: "\x1bOH", mode: AppCursor }

  # Font Size
  - { key: 24, mods: Command | Shift, action: ResetFontSize }

debug:
    # Display the time it takes to redraw each frame.
    render_timer: false

    # Keep the log file after quitting Alacritty.
    persistent_logging: false
# Log level
#
# Values for `log_level`:
#   - Off
#   - Error
#   - Warn
#   - Info
#   - Debug
#   - Trace
#log_level: Warn

# Print all received window events.
#print_events: false - { key: Right, mods: Command, chars: "\x1bOF", mode: AppCursor }
